Design your modules
A good Bicep module follows a few key principles:

A module should have a clear purpose. You can use modules to define all of the resources that are related to a specific part of your solution. For example, you might create a module that contains all of the resources that are used to monitor your application. You might also use a module to define a set of resources that belong together, like all of your database servers and databases.

Don't put every resource into its own module. You shouldn't create a separate module for every resource that you deploy. If you have a resource that has lots of complex properties, it might make sense to put that resource into its own module. But in general, it's better for modules to combine multiple resources.

A module should have clear parameters and outputs that make sense. Consider the purpose of the module. Think about whether the module should be manipulating parameter values, or whether the parent template should handle that and then pass a single value through to the module. Similarly, think about the outputs that a module should return, and make sure they're useful to the templates that will use the module.

A module should be as self-contained as possible. If a module needs to use a variable to define a part of a module, the variable should generally be included in the module file rather than in the parent template.

A module should not output secrets. Just like with templates, don't create module outputs for secret values like connection strings or keys.